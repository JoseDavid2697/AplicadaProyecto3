CREATE DATABASE B65949_DB_XYZ

USE B65949_DB_XYZ
GO

CREATE MASTER KEY ENCRYPTION BY
PASSWORD = '1234'


CREATE TABLE B65949_CLIENT(
ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
CLIENT_NAME VARCHAR(50) NOT NULL,
LASTNAME VARCHAR(50) NOT NULL,
AGE INT NOT NULL,
SUBMITTED_DATE DATETIME NOT NULL,
MIGRATED BIT
)



CREATE TABLE B65949_CLIENT_CREDIT_CARD(
CLIENT_ID INT NOT NULL,
CARD_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
CREDIT_CARD_NO VARBINARY(128),
SUBMMITTED_DATE DATETIME NULL,
MIGRATED BIT NULL
)


ALTER TABLE B65949_CLIENT_CREDIT_CARD
DROP COLUMN CLIENT_ID

DROP TABLE B65949_CLIENT_CREDIT_CARD

CREATE TABLE B65949_PURCHASE_ORDER(
CLIENT_PURCHASE_ORDER_ID INT PRIMARY KEY,
CLIENT_ID INT NOT NULL,
ORDER_DESCRIPTION VARCHAR(255) NOT NULL,
AMOUNT INT NOT NULL,
CREDIT_CARD_ID INT NOT NULL,
SUBMMITTED_DATE DATETIME NULL,
MIGRATED BIT NULL
)

DROP TABLE B65949_PURCHASE_ORDER

CREATE TABLE B65949_CLIENT_PHONE (
CLIENT_ID INT NOT NULL,
PHONE_NO VARBINARY(128) NOT NULL
)

--DROP TABLE B65949_CLIENT_PHONE

CREATE TABLE B65949_CLIENT_ADDRESS (
CLIENT_ID INT NOT NULL,
CLIENT_ADDRESS VARBINARY(255) NOT NULL
)

--DROP TABLE B65949_CLIENT_ADDRESS


CREATE TABLE B65949_CLIENT_EMAIL (
CLIENT_ID INT NOT NULL,
EMAIL VARBINARY(255) NOT NULL
)

--DROP TABLE B65949_CLIENT_EMAIL

ALTER TABLE B65949_CLIENT
ADD MIGRATED BIT 

ALTER TABLE B65949_CLIENT_ADDRESS
ADD MIGRATED BIT 

ALTER TABLE B65949_CLIENT_CREDIT_CARD
ADD MIGRATED BIT 

ALTER TABLE B65949_CLIENT_EMAIL
ADD MIGRATED BIT  

ALTER TABLE B65949_CLIENT_PHONE
ADD MIGRATED BIT 

ALTER TABLE B65949_PURCHASE_ORDER
ADD MIGRATED BIT 

SELECT * FROM B65949_CLIENT
SELECT * FROM B65949_CLIENT_ADDRESS
SELECT * FROM B65949_CLIENT_CREDIT_CARD
SELECT * FROM B65949_CLIENT_EMAIL
SELECT * FROM B65949_CLIENT_PHONE
SELECT * FROM B65949_PURCHASE_ORDER

--CREATION OF CERTIFICATE
CREATE CERTIFICATE B65949_PROYECTO3_CERTIFICATE
	WITH SUBJECT = 'SECRET INFO - CREDIT CARD NUMBER'
GO

--CREATION OF SYMMETRIC KEY
CREATE SYMMETRIC KEY B65949_PROYECTO3_SSN_KEY
	WITH ALGORITHM = AES_256
	ENCRYPTION BY CERTIFICATE B65949_PROYECTO3_CERTIFICATE
GO

/*********************
	DATA INSERTION
**********************/
DECLARE @local_FLAG INT = 1
WHILE(@local_FLAG <= 1000)
BEGIN
	INSERT INTO B65949_CLIENT
	(
		CLIENT_NAME
		,LASTNAME
		,AGE
		,SUBMMITTED_DATE
		,MIGRATED
	)
	SELECT 
	'Jose'
	,'Rodriguez'
	,21
	,GETDATE()
	,0

	SELECT @local_FLAG = @local_FLAG +1

END

SELECT * FROM B65949_CLIENT


SELECT * FROM B65949_CLIENT_CREDIT_CARD

DECLARE @local_FLAG INT = 1
WHILE(@local_FLAG <= 1000)
BEGIN
	OPEN SYMMETRIC KEY B65949_PROYECTO3_SSN_KEY
		DECRYPTION BY CERTIFICATE B65949_PROYECTO3_CERTIFICATE

	INSERT INTO B65949_CLIENT_CREDIT_CARD(CLIENT_ID,CREDIT_CARD_NO,SUBMMITTED_DATE,MIGRATED)
	VALUES(1,ENCRYPTBYKEY(KEY_GUID('B65949_PROYECTO3_SSN_KEY'),'4380990788903377'),GETDATE(),0)
	

	SELECT @local_FLAG = @local_FLAG +1

END

SELECT * FROM B65949_PURCHASE_ORDER




DECLARE @local_FLAG INT = 1
WHILE(@local_FLAG <= 1000)
BEGIN
	OPEN SYMMETRIC KEY B65949_PROYECTO3_SSN_KEY
		DECRYPTION BY CERTIFICATE B65949_PROYECTO3_CERTIFICATE

	INSERT INTO B65949_PURCHASE_ORDER(CLIENT_ID,ORDER_DESCRIPTION,AMOUNT,CREDIT_CARD_ID,SUBMMITTED_DATE,MIGRATED)
	VALUES(1,'Compra de una nueva laptop',1200,1,GETDATE(),0)
	

	SELECT @local_FLAG = @local_FLAG +1

END


DECLARE @local_FLAG INT = 1
WHILE(@local_FLAG <= 1000)
BEGIN
	OPEN SYMMETRIC KEY B65949_PROYECTO3_SSN_KEY
		DECRYPTION BY CERTIFICATE B65949_PROYECTO3_CERTIFICATE

	INSERT INTO B65949_CLIENT_ADDRESS(CLIENT_ID,CLIENT_ADDRESS,SUBMMITTED_DATE,MIGRATED)
	VALUES(1,ENCRYPTBYKEY(KEY_GUID('B65949_PROYECTO3_SSN_KEY'),'Turrialba,Cartago,Costa Rica'),GETDATE(),0)
	

	SELECT @local_FLAG = @local_FLAG +1

END

/***********************

	STORED PROCEDURES

***********************/

/**************************************************
	GET ALL DATA FILTER BY DATES AND TABLE NAME
**************************************************/
USE [B65949_DB_XYZ]
GO


/****** Object:  StoredProcedure [dbo].[B65949_spGetAllData]    Script Date: 26/10/2019 21:21:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[B65949_spGetAllData] 
@from_date DATE
,@to_date DATE
,@table_name VARCHAR(100)
AS
DECLARE @OUTPUT_IS_SUCCESSFUL INT
DECLARE @OUTPUT_STATUS VARCHAR(25)
BEGIN
		
	SET NOCOUNT ON;

	SET @OUTPUT_IS_SUCCESSFUL = 0
	SET @OUTPUT_STATUS = 'Error returning data'

	BEGIN TRY

		OPEN SYMMETRIC KEY B65949_PROYECTO3_SSN_KEY
		DECRYPTION BY CERTIFICATE B65949_PROYECTO3_CERTIFICATE
		
		IF(@table_name = 'B65949_CLIENT')
		BEGIN 
				/*Select all data that matches the input date range
				and its status of migration is false*/
				SELECT 
					[ID]
					, [CLIENT_NAME]
					, [LASTNAME]
					, [AGE]
					, [SUBMMITTED_DATE]
					, [MIGRATED]
				INTO TEMP
				FROM B65949_CLIENT
				WHERE CAST(SUBMMITTED_DATE AS DATE) >= @from_date
				AND CAST(SUBMMITTED_DATE AS DATE) <=   @to_date
				AND MIGRATED = 0

				UPDATE B65949_CLIENT
				SET MIGRATED = 1
				FROM B65949_CLIENT
					JOIN TEMP
						ON B65949_CLIENT.ID = TEMP.ID
	    
				SELECT
					T.[ID]
					, T.[CLIENT_NAME]
					, T.[LASTNAME]
					, T.[AGE]
					, T.[SUBMMITTED_DATE]
					, T.[MIGRATED]
				FROM TEMP T
					JOIN TEMP
					ON T.ID = TEMP.ID

				DROP TABLE TEMP

				SET @OUTPUT_STATUS = 'SUCCESSFUL RUNNING'
				SET @OUTPUT_IS_SUCCESSFUL = 1
		END
		ELSE 
		IF(@table_name = 'B65949_CLIENT_ADDRESS')
		BEGIN
				/*Select all data that matches the input date range
				and its status of migration is false*/
				SELECT 
				    CLIENT_ADDRESS_ID
					,[CLIENT_ID]
					,CONVERT(VARCHAR,DECRYPTBYKEY(CLIENT_ADDRESS)) AS 'CLIENT_ADDRESS'
					, [SUBMMITTED_DATE]
					, [MIGRATED]
				INTO TEMP
				FROM B65949_CLIENT_ADDRESS
				WHERE CAST(SUBMMITTED_DATE AS DATE) >= @from_date
				AND CAST(SUBMMITTED_DATE AS DATE) <=   @to_date
				AND MIGRATED = 0
				
				
				UPDATE B65949_CLIENT_ADDRESS
				SET MIGRATED = 1
				FROM B65949_CLIENT_ADDRESS
					JOIN TEMP
						ON B65949_CLIENT_ADDRESS.[CLIENT_ADDRESS_ID] = TEMP.[CLIENT_ADDRESS_ID]
	    


				SELECT
				   T.CLIENT_ADDRESS_ID
					,T.[CLIENT_ID]
					, T.[CLIENT_ADDRESS]
					, T.[SUBMMITTED_DATE]
					, T.[MIGRATED]
				FROM TEMP T
					JOIN TEMP
					ON T.[CLIENT_ADDRESS_ID] = TEMP.[CLIENT_ADDRESS_ID]

				DROP TABLE TEMP

				SET @OUTPUT_STATUS = 'SUCCESSFUL RUNNING'
				SET @OUTPUT_IS_SUCCESSFUL = 1
			END
		ELSE 
		IF(@table_name = 'B65949_CLIENT_CREDIT_CARD')
		BEGIN
				/*Select all data that matches the input date range
				and its status of migration is false*/
				SELECT 
					[CLIENT_ID]
					, [CARD_ID]
					, CONVERT(VARCHAR,DECRYPTBYKEY(CREDIT_CARD_NO)) AS 'CREDIT_CARD_NO'
					, [SUBMMITTED_DATE]
					, [MIGRATED]
				INTO TEMP
				FROM B65949_CLIENT_CREDIT_CARD
				WHERE CAST(SUBMMITTED_DATE AS DATE) >= @from_date
				AND CAST(SUBMMITTED_DATE AS DATE) <=   @to_date
				AND MIGRATED = 0

				UPDATE B65949_CLIENT_CREDIT_CARD
				SET MIGRATED = 1
				FROM B65949_CLIENT_CREDIT_CARD
					JOIN TEMP
						ON B65949_CLIENT_CREDIT_CARD.CARD_ID = TEMP.CARD_ID
	    
				SELECT
					T.[CLIENT_ID]
					, T.[CARD_ID]
					, T.[CREDIT_CARD_NO]
					, T.[SUBMMITTED_DATE]
					, T.[MIGRATED]
				FROM TEMP T
					JOIN TEMP
					ON T.CARD_ID = TEMP.CARD_ID

				DROP TABLE TEMP

				SET @OUTPUT_STATUS = 'SUCCESSFUL RUNNING'
				SET @OUTPUT_IS_SUCCESSFUL = 1
			END
		ELSE
		IF(@table_name = 'B65949_CLIENT_EMAIL')
		BEGIN
				/*Select all data that matches the input date range
				and its status of migration is false*/
				SELECT
					[CLIENT_EMAIL_ID]
					,[CLIENT_ID]
					, CONVERT(VARCHAR,DECRYPTBYKEY(EMAIL)) AS 'EMAIL'
					, [SUBMMITTED_DATE]
					, [MIGRATED]
				INTO TEMP
				FROM B65949_CLIENT_EMAIL
				WHERE CAST(SUBMMITTED_DATE AS DATE) >= @from_date
				AND CAST(SUBMMITTED_DATE AS DATE) <=   @to_date
				AND MIGRATED = 0

				UPDATE B65949_CLIENT_EMAIL
				SET MIGRATED = 1
				FROM B65949_CLIENT_EMAIL
					JOIN TEMP
						ON B65949_CLIENT_EMAIL.CLIENT_EMAIL_ID = TEMP.CLIENT_EMAIL_ID
	    
				SELECT
					T.CLIENT_EMAIL_ID
					,T.[CLIENT_ID]
					, T.[EMAIL]
					, T.[SUBMMITTED_DATE]
					, T.[MIGRATED]
				FROM TEMP T
					JOIN TEMP
					ON T.CLIENT_EMAIL_ID = TEMP.CLIENT_EMAIL_ID

				DROP TABLE TEMP

				SET @OUTPUT_STATUS = 'SUCCESSFUL RUNNING'
				SET @OUTPUT_IS_SUCCESSFUL = 1

			END
		ELSE
		IF(@table_name = 'B65949_CLIENT_PHONE')
		BEGIN
				/*Select all data that matches the input date range
				and its status of migration is false*/
				SELECT 
					[CLIENT_PHONE_ID]
					,[CLIENT_ID]
					, CONVERT(VARCHAR,DECRYPTBYKEY(PHONE_NO)) AS 'PHONE_NO'
					, [SUBMMITTED_DATE]
					, [MIGRATED]
				INTO TEMP
				FROM B65949_CLIENT_PHONE
				WHERE CAST(SUBMMITTED_DATE AS DATE) >= @from_date
				AND CAST(SUBMMITTED_DATE AS DATE) <=   @to_date
				AND MIGRATED = 0

				UPDATE B65949_CLIENT_PHONE
				SET MIGRATED = 1
				FROM B65949_CLIENT_PHONE
					JOIN TEMP
						ON B65949_CLIENT_PHONE.CLIENT_PHONE_ID = TEMP.CLIENT_PHONE_ID
	    
				SELECT
					T.[CLIENT_PHONE_ID]
					,T.[CLIENT_ID]
					, T.[PHONE_NO]
					, T.[SUBMMITTED_DATE]
					, T.[MIGRATED]
				FROM TEMP T
					JOIN TEMP
					ON T.[CLIENT_PHONE_ID] = TEMP.[CLIENT_PHONE_ID]

				DROP TABLE TEMP

				SET @OUTPUT_STATUS = 'SUCCESSFUL RUNNING'
				SET @OUTPUT_IS_SUCCESSFUL = 1
			END
		ELSE
		BEGIN
				/*Select all data that matches the input date range
				and its status of migration is false*/
				SELECT
					 [CLIENT_PURCHASE_ORDER_ID]
					,[CLIENT_ID]
					, [ORDER_DESCRIPTION]
					, [AMOUNT]
					, [CREDIT_CARD_ID]
					, [SUBMMITTED_DATE]
					, [MIGRATED]
				INTO TEMP
				FROM B65949_PURCHASE_ORDER
				WHERE CAST(SUBMMITTED_DATE AS DATE) >= @from_date
				AND CAST(SUBMMITTED_DATE AS DATE) <=   @to_date
				AND MIGRATED = 0

				UPDATE B65949_PURCHASE_ORDER
				SET MIGRATED = 1
				FROM B65949_PURCHASE_ORDER
					JOIN TEMP
						ON B65949_PURCHASE_ORDER.[CLIENT_PURCHASE_ORDER_ID] = TEMP.[CLIENT_PURCHASE_ORDER_ID]
	    
				SELECT
					T.[CLIENT_PURCHASE_ORDER_ID]
					,T.[CLIENT_ID]
					, T.[ORDER_DESCRIPTION]
					, T.[AMOUNT]
					, T.[CREDIT_CARD_ID]
					, T.[SUBMMITTED_DATE]
					, T.[MIGRATED]
				FROM TEMP T
					JOIN TEMP
					ON T.[CLIENT_PURCHASE_ORDER_ID] = TEMP.[CLIENT_PURCHASE_ORDER_ID]

				DROP TABLE TEMP

				SET @OUTPUT_STATUS = 'SUCCESSFUL RUNNING'
				SET @OUTPUT_IS_SUCCESSFUL = 1
		END

		CLOSE SYMMETRIC KEY B65949_PROYECTO3_SSN_KEY
	END TRY
	BEGIN CATCH

		SET @OUTPUT_STATUS = @OUTPUT_STATUS + ' ' + ERROR_MESSAGE()
		SET @OUTPUT_IS_SUCCESSFUL = 1
		RAISERROR(@OUTPUT_STATUS,16,1)


	END CATCH

END
GO





/************
	EXEC
************/

UPDATE B65949_CLIENT
SET MIGRATED = 0

UPDATE B65949_CLIENT_ADDRESS
SET MIGRATED = 0

UPDATE B65949_CLIENT_EMAIL
SET MIGRATED = 0

UPDATE B65949_CLIENT_PHONE
SET MIGRATED = 0

UPDATE B65949_CLIENT_CREDIT_CARD
SET MIGRATED = 0

UPDATE B65949_PURCHASE_ORDER
SET MIGRATED = 0


/******************************************
	DELETE CLIENT AND PURCHASE DATA
******************************************/
USE B65949_DB_XYZ
GO

-- =============================================
-- Author:		<Jose,Jose David>
-- Create date: <22-10-19>
-- Description:	<Deletes the client data once its migrated>
-- =============================================
ALTER PROCEDURE B65949_spDeleteClientsData
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY

		DELETE 
		FROM B65949_CLIENT
		WHERE MIGRATED = 1
	END TRY
	BEGIN CATCH
		RAISERROR('No data can be deleted',16,1)
	END CATCH
END
GO


-- =============================================
-- Author:		<Jose,Jose David>
-- Create date: <22-10-19>
-- Description:	<Deletes client_purchase_order once its migrated>
-- =============================================
ALTER PROCEDURE B65949_spDeletePurchaseData
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY

		DELETE 
		FROM B65949_PURCHASE_ORDER
		WHERE MIGRATED = 1
	END TRY
	BEGIN CATCH
		RAISERROR('No data can be delete',16,1)
	END CATCH
END
GO

--INSERT WITH ENCRYPTION

OPEN SYMMETRIC KEY B65949_PROYECTO3_SSN_KEY
		DECRYPTION BY CERTIFICATE B65949_PROYECTO3_CERTIFICATE
INSERT INTO B65949_CLIENT_EMAIL(CLIENT_ID,EMAIL,SUBMMITTED_DATE,MIGRATED)
VALUES(1,ENCRYPTBYKEY(KEY_GUID('B65949_PROYECTO3_SSN_KEY'),'pruebaemail@gmail.com'),GETDATE(),0)

CLOSE SYMMETRIC KEY B65949_PROYECTO3_SSN_KEY